{
  "version": 3,
  "sources": ["../node_modules/node-fetch/browser.js", "../node_modules/@callum.boase/fetch/_fetch.js", "../node_modules/knack-api-helper/knack-api-helper.js", "../knack-api/knack-api-payloads.js", "../knack-api/knack-api-filters.js", "../knack-api/knack-api-calls.js", "../knack-api/knack-api-init.js", "../knack-api/knack-api-utils.js", "../knack-api/knack-api-timeout.js", "../index.js"],
  "sourcesContent": ["\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar globalObject = getGlobal();\n\nmodule.exports = exports = globalObject.fetch;\n\n// Needed for TypeScript and Webpack.\nif (globalObject.fetch) {\n\texports.default = globalObject.fetch.bind(globalObject);\n}\n\nexports.Headers = globalObject.Headers;\nexports.Request = globalObject.Request;\nexports.Response = globalObject.Response;\n", "//Only load node-fetch in nodeJs environment\r\n//If we're running this file in browser, we'll use the browser's fetch API which is built-in\r\n//If bundling this module for browser usage, skip bundling node-fetch\r\n//Eg if bundling using browserify add flag \"--external node-fetch\" when running \"browserify...\"\r\n//  The bundling will assume node-fetch is already avaialble in the environment, which it will NOT be\r\n//  So the if statement ensures we don't try to use the non-existent node-fetch\r\nif(inBrowser()){\r\n    fetch = window.fetch;\r\n} else {\r\n    var fetch = require('node-fetch');\r\n}\r\n\r\nfunction inBrowser(){\r\n    try {\r\n        window.fetch;\r\n        return true\r\n    } catch (err){\r\n        return false;\r\n    }\r\n}\r\n\r\nconst _fetch = {\r\n    \r\n    delay(ms) {\r\n        return new Promise((resolve) => setTimeout(resolve, ms));\r\n    },\r\n\r\n    tools: {\r\n        exponentialBackoff(attempt){\r\n            return Math.pow(2, attempt - 1) * 1000; //1000, 2000, 4000 etc\r\n        }\r\n    },\r\n\r\n    defaults: {\r\n\r\n        retryDelay(attempt, mostRecentErr){\r\n            if(mostRecentErr.details.response.status === 429){\r\n                return Math.pow(2, attempt - 1) * 1000; //Exponential backoff same as _fetch.tools.exponentialBackoff\r\n            } else {\r\n                return 1000;\r\n            }\r\n        },\r\n\r\n        retryOn(attempt, err){\r\n            if(err.details && err.details.response && (err.details.response.status >= 500 || err.details.response.status === 429)){\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n    },\r\n\r\n    async wrapper(url, options = {}, helperData = {}) {\r\n\r\n        try {\r\n\r\n            const response = await fetch(url, options);\r\n\r\n            const text = await response.text();\r\n\r\n            //You can only consume response body methods once\r\n            //So we get text above and then convert text to JSON if applicable\r\n            let json = null;\r\n            if(isJson(text)){\r\n                json = JSON.parse(text);\r\n            } \r\n\r\n            if(response && response.ok){\r\n                return {url, options, response, helperData, json, text}\r\n            }\r\n\r\n            let err = new Error(`Successful http request but response.ok === false. Code: ${response.status}, Text: ${text}`);\r\n            err.details = {url, options, response, helperData, json, text};\r\n            throw err;\r\n       \r\n        } catch(err) {//This runs with either the above manually thrown error, or with fetch-API generated errors\r\n            !err.details ? err.details = {url, options, helperData} : err.datails;\r\n            throw err;\r\n        }\r\n\r\n        function isJson(text){\r\n            try {\r\n                JSON.parse(text);\r\n                return true;\r\n            } catch(err){\r\n                return false;\r\n            }\r\n        }\r\n\r\n    },\r\n\r\n    async one (settings = {url, options, helperData, retries, retryDelay, retryOn}) {\r\n\r\n        if(typeof settings !== 'object' || !settings.url) throw new Error('Invalid argument when calling _fetch.one. You must call _fetch.one with an object (settings), containing at-minimum: settings = {url: string}');\r\n\r\n        if (!settings.options) settings.options = {method: 'GET'};\r\n        if (settings.options && !settings.options.method) settings.options.method = 'GET';\r\n\r\n        if (!settings.retries && settings.retries !== 0) settings.retries = 5;\r\n\r\n        if(typeof settings.retryDelay !== 'function' && typeof settings.retryDelay !== 'number'){\r\n            settings.retryDelay = this.defaults.retryDelay;\r\n        }   \r\n\r\n        if (typeof settings.retryOn !== 'function'){\r\n            settings.retryOn = this.defaults.retryOn;\r\n        }\r\n    \r\n        //thanks to: https://dev.to/ycmjason/javascript-fetch-retry-upon-failure-3p6g\r\n        let mostRecentErr;\r\n\r\n        for(let i = 0; i <= settings.retries; i++){\r\n            try {\r\n\r\n                if(i > 0) {\r\n                    let retryDelay;\r\n\r\n                    if(typeof settings.retryDelay === 'function') {\r\n                        retryDelay = settings.retryDelay(i, mostRecentErr)\r\n                    } else {\r\n                        retryDelay = settings.retryDelay;\r\n                    }\r\n\r\n                    await this.delay(retryDelay);\r\n                }\r\n                return await this.wrapper(settings.url, settings.options, settings.helperData);\r\n            \r\n            } catch (err){\r\n\r\n                const isLastRetry = i === settings.retries;\r\n                if(isLastRetry) throw err;\r\n\r\n                const shouldRetry = await settings.retryOn(i, err);\r\n                if(!shouldRetry) throw err;\r\n\r\n                mostRecentErr = err;\r\n\r\n                console.log(`failed fetch ${settings.options.method} to ${settings.url}. Code: ${err.details && err.details.response ? err.details.response.status : \"\"}. Attempt ${i}. Retrying...`);\r\n            }\r\n        }\r\n    },\r\n\r\n    async many (settings = {requests, delayMs, progressCbs}) {\r\n\r\n        if(!settings.delayMs) settings.delayMs = 125;\r\n    \r\n        let promises = [];\r\n        settings.requests.forEach( (request, i) => {\r\n            const promise = (async () => {\r\n                await this.delay(i*settings.delayMs);\r\n                const fetchResult = await this.one({\r\n                    url: request.url, \r\n                    options: request.options,\r\n                    retries: request.retries, \r\n                    retryDelay: request.retryDelay,\r\n                    retryOn: request.retryOn,\r\n                    helperData: {request, delayMs: i*settings.delayMs, i},\r\n                });\r\n                progress++\r\n    \r\n                if(settings.progressCbs && settings.progressCbs.length){\r\n                    settings.progressCbs.forEach(progressCb => {\r\n                        progressCb(progress, len, fetchResult)\r\n                    });\r\n                }\r\n    \r\n                return fetchResult;\r\n            })();\r\n            promises.push(promise);\r\n        });\r\n    \r\n        const len = promises.length;\r\n        let progress = 0;\r\n    \r\n        return Promise.allSettled(promises);\r\n    }\r\n\r\n}\r\n\r\nif(typeof require != 'undefined') module.exports = _fetch;", "const _fetch = require('@callum.boase/fetch');\r\n\r\nfunction KnackAPI(config) {\r\n\r\n    checkConfig();\r\n\r\n    if(config.auth === 'view-based'){\r\n        \r\n        this.headers = {\r\n            \"X-Knack-Application-ID\": config.applicationId,\r\n            \"X-Knack-REST-API-Key\": \"knack\",\r\n            \"Authorization\": typeof config.userToken === 'string' ? config.userToken : \"\",\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n\r\n    } else if(config.auth === 'object-based'){\r\n\r\n        this.headers = {\r\n            \"X-Knack-Application-ID\": config.applicationId,\r\n            \"X-Knack-REST-API-Key\": config.apiKey,\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n\r\n    }\r\n\r\n    this.urlBase = `https://api.knack.com/v1`;\r\n\r\n    this.remoteLogin = async function(settings = {email, password}){\r\n        return await _fetch.one({\r\n            url: `${this.urlBase}/applications/${this.headers['X-Knack-Application-ID']}/session`,\r\n            options: {\r\n                method: 'POST',\r\n                body: JSON.stringify({\r\n                    email: settings.email,\r\n                    password: settings.password\r\n                }),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    this.login = async function(settings = {email, password}){\r\n        if(settings.email && settings.password){\r\n            const res = await this.remoteLogin(settings);\r\n            const token = res.json.session.user.token;\r\n            this.headers.Authorization = token;\r\n            return token;\r\n        } else {\r\n            throw new Error('You did not specify one/both of email and password in settings object. Could not log in');\r\n        }\r\n\r\n    },\r\n\r\n    this.validateSession = async function (settings = {userToken, userRoleCheck}) {\r\n\r\n        if(typeof settings.userToken !== 'string'){\r\n            throw new Error('You must provide a settings object with at least a userToken (string) to validateSession()');\r\n        }\r\n\r\n        try {\r\n      \r\n            const response = await _fetch.one({\r\n                url: `${this.urlBase}/session/token`,\r\n                options: {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'Authorization': settings.userToken,\r\n                        'x-knack-application-id': this.headers['X-Knack-Application-ID']\r\n                    }\r\n                }\r\n            });\r\n      \r\n            //Will automatically error if session not valid.\r\n      \r\n            //If we get to here, it's is a real user token. Now we perform more checks.\r\n      \r\n            const session = response.json?.session;\r\n\r\n            if(!session) throw new Error('No session found');\r\n            if (session.user.status !== 'current') throw new Error('Valid user but session not current.')\r\n            if (session.user.account_status !== 'active') throw new Error('Valid user but status not active.');\r\n            if (session.user.approval_status !== 'approved') throw new Error('Valid user but approval status is not approved.');\r\n      \r\n            if (settings.userRoleCheck) {\r\n                if (!session.user.profile_keys.includes(settings.userRoleCheck)) {\r\n                    throw new Error('Valid user but does not include the specified user role.')\r\n                }\r\n            }\r\n\r\n            //All checks passed. The session is valid\r\n            return true;\r\n        \r\n        } catch (err) {\r\n            //The session is not valid\r\n            return false;\r\n        }\r\n    }, \r\n\r\n    this.url = function(settings = {scene, view, object, recordId}){\r\n        \r\n        let url = this.urlBase;\r\n\r\n        if(config.auth === 'view-based'){\r\n            url += `/pages/${settings.scene}/views/${settings.view}/records/`;\r\n        } else if (config.auth === 'object-based'){\r\n            url += `/objects/${settings.object}/records/`;\r\n        }\r\n\r\n        if(settings.recordId) url += settings.recordId;\r\n        return url;\r\n    }\r\n\r\n    this.getRetries = function(retries) {\r\n        if(typeof retries === 'number'){\r\n            return retries;\r\n        } else {\r\n            return 5;\r\n        }\r\n    }\r\n\r\n    this.setup = function(method, settings){\r\n        let url = \"\";\r\n\r\n        if(config.auth === 'view-based'){\r\n\r\n            url = this.url({\r\n                scene: settings.scene, \r\n                view: settings.view, \r\n                recordId: settings.recordId\r\n            });\r\n        \r\n        } else if (config.auth === 'object-based'){\r\n\r\n            url = this.url({\r\n                object: settings.object, \r\n                recordId: settings.recordId\r\n            });\r\n\r\n        }\r\n\r\n        const options = {\r\n            method,\r\n            headers: this.headers,\r\n        }\r\n\r\n        if(settings.body) options.body = JSON.stringify(settings.body);\r\n\r\n        const retries = this.getRetries(settings.retries);\r\n        return {url, options, retries, helperData: settings.helperData};\r\n\r\n    }\r\n\r\n    this.single = async function(method, settings){\r\n        const req = this.setup(method, settings);\r\n        return await _fetch.one(req);\r\n    }\r\n\r\n    this.many = async function(method, settings){\r\n\r\n        if(method === 'GET') return console.log('knackAPI.many is only for POST, PUT and DELETE');\r\n\r\n        const requests = [];\r\n\r\n        settings.records.forEach(record => {\r\n            const reqSettings = {\r\n                view: settings.view, \r\n                scene: settings.scene, \r\n                object: settings.object,\r\n                retries: settings.retries\r\n            }\r\n            if(method !== 'DELETE'){\r\n                reqSettings.body = record;\r\n            }\r\n            if(method !== 'POST'){\r\n                reqSettings.recordId = record.id;\r\n            }\r\n            requests.push(this.setup(method, reqSettings));\r\n        });\r\n\r\n        if(settings.resultsReport) this.tools.manyResultsReport.remove(settings.resultsReport); \r\n\r\n        const progressCbs = this.progressCbsSetup(settings); \r\n\r\n        const results = await _fetch.many({requests, delayMs: 125, progressCbs});\r\n        results.settings = settings;\r\n        results.summary = this.tools.manyResultsReport.calc(results);\r\n\r\n        if(settings.resultsReport){\r\n            this.tools.manyResultsReport.create(settings.resultsReport, results);\r\n        }\r\n\r\n        return results;\r\n    }\r\n\r\n    this.progressCbsSetup = function(settings){\r\n\r\n        let progressCbs = [];\r\n        if(settings.progressBar){\r\n            this.tools.progressBar.create(settings.progressBar);\r\n            progressCbs.push((progress, len, fetchResult) => {\r\n                this.tools.progressBar.update(settings.progressBar.id, progress, len);\r\n            });\r\n        }\r\n\r\n        if(settings.progressCbs && settings.progressCbs.length){\r\n            settings.progressCbs.forEach(progressCb => progressCbs.push(progressCb));\r\n        }\r\n\r\n        return progressCbs;\r\n\r\n    }\r\n\r\n    this.get = async function(settings = {view, scene, object, recordId, helperData}){\r\n        return await this.single('GET', settings);\r\n    }\r\n\r\n    this.post = async function(settings = {view, scene, object, body, helperData, retries}){\r\n        return await this.single('POST', settings);\r\n    }\r\n\r\n    this.put = async function(settings = {recordId, view, scene, object, body, helperData, retries}){\r\n        return await this.single('PUT', settings);\r\n    }\r\n\r\n    this.delete = async function(settings = {recordId, view, scene, object, helperData, retries}){\r\n        return await this.single('DELETE', settings);\r\n    }\r\n\r\n\r\n    this.getMany = async function(settings = {view, scene, object, filters, rowsPerpage, startAtPage, maxRecordsToGet, helperData}, currentPage = 1, final = {records: [], pages: []}){\r\n\r\n        const req = this.setup('GET', settings);\r\n\r\n        if(currentPage === 1){//Only on the first run, not subequent runs\r\n            if(settings.startAtPage > 1) currentPage = settings.startAtPage;\r\n        }\r\n\r\n        const maxRecordsToGet = settings.maxRecordsToGet > 0 ? settings.maxRecordsToGet : Infinity;\r\n        \r\n        let rowsPerPage = settings.rowsPerPage ? settings.rowsPerPage : 1000;\r\n\r\n        req.url += `?page=${currentPage}&rows_per_page=${rowsPerPage}`;\r\n\r\n        if(settings.format) req.url += `&format=${settings.format}`;\r\n        if(settings.filters) req.url += `&filters=${JSON.stringify(settings.filters)}`;\r\n\r\n        const result = await _fetch.one(req);\r\n\r\n        final.pages.push(result);\r\n        result.json.records.map(record => final.records.push(record));\r\n        final.helperData = settings.helperData;\r\n\r\n        if(final.records.length > maxRecordsToGet){\r\n            final.records = final.records.splice(0,maxRecordsToGet);\r\n        }\r\n\r\n        if(final.records.length < maxRecordsToGet && result.json.current_page < result.json.total_pages){\r\n            return await this.getMany(settings, result.json.current_page + 1, final);\r\n        } else {\r\n            return final;\r\n        }\r\n    }\r\n\r\n    this.putMany = async function(settings = {records, view, scene, object, helperData, retries, progressBar, progressCbs, resultsReport}){\r\n        return await this.many('PUT', settings);\r\n    }\r\n\r\n    this.postMany = async function (settings = {records, view, scene, object, helperData, retries, progressBar, progressCbs, resultsReport}){\r\n        return await this.many('POST', settings);\r\n    }\r\n\r\n    this.deleteMany = async function(settings = {records, view, scene, object, helperData, retries, progressBar, progressCbs, resultsReport}){\r\n        return await this.many('DELETE', settings);\r\n    }\r\n\r\n    //API call to get data from a report view like pivot table, bar chart or similar. Only works with view-based auth\r\n    this.getFromReportView = async function(settings = {view, scene, sceneRecordId, helperData, retries}){\r\n\r\n        //Check for errors in config, since it's a bit different to other API calls\r\n        if (config.auth !== 'view-based') throw new Error('getFromReportView() only works when using view-based auth');\r\n        if (!settings.view || !settings.scene) throw new Error('getFromReportView() requires a view and scene. You did not specify one or both.');\r\n        if (settings.recordId) throw new Error('getFromReportView() does not support recordId. Specify settings.sceneRecordId if you are trying to load a report on a child page that has the data source of \"this page\\'s record\" or similar.');\r\n\r\n        //Build the URL, which has a different format to other API calls\r\n        //All reports API calls take format of /pages/{scene}/views/{view}/report\r\n        //If the report is on a child page with data source of \"this page's record\", then we need to add query string of ?{sceneSlug}_id={sceneRecordId} so Knack knows what record to filter records by\r\n        //Eg /pages/scene_1/views/view_1/report?dashboard_id=63e1bfe1a978400745e3a736\r\n        let url = `${this.urlBase}/scenes/${settings.scene}/views/${settings.view}/report`;\r\n        if(settings.sceneRecordId) {\r\n            const sceneSlug = await this.getSceneSlug(settings.scene);\r\n            url += `?${sceneSlug}_id=${settings.sceneRecordId}`\r\n        }\r\n\r\n        //Build the _fetch request object\r\n        const req = {\r\n            url,\r\n            options: {\r\n                method: 'GET',\r\n                headers: this.headers\r\n            },\r\n            retries: this.getRetries(settings.retries),\r\n            helperData: settings.helperData\r\n        }\r\n\r\n        //Run the API call.\r\n        return await _fetch.one(req);\r\n\r\n    }\r\n\r\n    this.tools = {\r\n        progressBar: {\r\n\r\n            html(id){\r\n                return $(`\r\n                    <div id=\"${id}\" style=\"margin-bottom: 10px;\">\r\n                        <span class=\"before-progress-bar\" style=\"margin-right: 5px;\"><em><strong>Processing records</em></strong></span>\r\n                        <progress id=\"progressBar\" value=\"0\" max=\"100\"></progress>\r\n                        <span class=\"after-progress-bar\" style=\"margin-left: 5px;\" id=\"progressText\">Initialising...</span>\r\n                    </div>\r\n                `);\r\n            },\r\n\r\n            update(id, progress, len){\r\n                $(`#${id} #progressBar`).val(Math.round(progress / len * 100));\r\n                $(`#${id} #progressText`).text(`${progress}/${len}`);\r\n            },\r\n\r\n            create(progressBar){\r\n                $(`#${progressBar.id}`).remove();\r\n                if(progressBar.insertAfter){\r\n                    this.html(progressBar.id).insertAfter(progressBar.insertAfter);\r\n                } else if(progressBar.insertBefore){\r\n                    this.html(progressBar.id).insertBefore(progressBar.insertBefore);\r\n                } else if(progressBar.appendTo){\r\n                    this.html(progressBar.id).appendTo(progressBar.appendTo);\r\n                } else if(progressBar.prependTo){\r\n                    this.html(progressBar.id).prependTo(progressBar.prependTo);\r\n                } else {\r\n                    console.log('Invalid progress bar location');\r\n                } \r\n            }\r\n        },\r\n\r\n        manyResultsReport: {\r\n\r\n            calc(results){\r\n                const fulfilled = results.reduce((acc, curr) => {\r\n                    if(curr.status === 'fulfilled') acc++;\r\n                    return acc;\r\n                },0);\r\n                const rejected = results.reduce((acc, curr) => {\r\n                    if(curr.status === 'rejected') acc++;\r\n                    return acc;\r\n                },0);\r\n                const errors = results.filter(result => {\r\n                    if(result.status !== 'fulfilled'){\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                })\r\n                return {fulfilled, rejected, errors};\r\n            },\r\n\r\n            html(id, results){\r\n                const summary = this.calc(results);\r\n                return $(`\r\n                    <div id=${id}>\r\n                        <p><strong>Finished processing</strong></p>\r\n                        <p>Summary:</p>\r\n                        <p>\r\n                            <ul>\r\n                                <li>Failed: ${summary.rejected}</li>\r\n                                <li>Succeeded: ${summary.fulfilled}</li>\r\n                            </ul>\r\n                        </p>\r\n                    </div>\r\n                `) \r\n            },\r\n\r\n            create(resultsReport, results){\r\n                if(resultsReport.insertAfter){\r\n                    this.html(resultsReport.id, results).insertAfter(resultsReport.insertAfter);\r\n                } else if(resultsReport.insertBefore){\r\n                    this.html(resultsReport.id, results).insertBefore(resultsReport.insertBefore);\r\n                } else if(resultsReport.appendTo){\r\n                    this.html(resultsReport.id, results).appendTo(resultsReport.appendTo);\r\n                } else if(resultsReport.prependTo){\r\n                    this.html(resultsReport.id, results).prependTo(resultsReport.prependTo);\r\n                } else {\r\n                    console.log('Invalid summary location');\r\n                } \r\n            },\r\n\r\n            remove(resultsReport){\r\n                $(`#${resultsReport.id}`).remove();\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    //Utility function to get the current slug of a scene (eg dashboard) based on it's key (eg scene_21) using the Knack API\r\n    this.getSceneSlug = async function(sceneKey) {\r\n        const appDataUrl = `${this.urlBase}/applications/${this.headers['X-Knack-Application-ID']}`;\r\n\r\n        const appData = await _fetch.one({\r\n            url: appDataUrl,\r\n            options: {\r\n                method: 'GET',\r\n            }\r\n        });\r\n\r\n        const scenes = appData.json.application.scenes;\r\n\r\n        const scene = scenes.find(scene => scene.key === sceneKey);\r\n\r\n        if(!scene) throw new Error(`Scene with key ${sceneKey} not found, when trying to find corresponding slug (url). Could not continue.`);\r\n\r\n        const slug = scene.slug;\r\n        if(!slug) throw new Error(`Scene with key ${sceneKey} found, but no slug (url) found. Could not continue.`);\r\n\r\n        return slug;\r\n\r\n    }\r\n\r\n\r\n    function checkConfig(){\r\n\r\n        if(!config) throw new Error('KnackAPI config settings object not found');\r\n\r\n        if(!config.auth) throw new Error('KnackAPI.auth configuration not found');\r\n\r\n        if(config.auth !== 'object-based' && config.auth !== 'view-based') {\r\n            throw new Error(`KnackAPI.auth invalid - should be \"view-based\" or \"object-based\" but got \"${config.auth}\"`);\r\n        }\r\n\r\n        if(!config.applicationId) throw new Error(`KnackAPI.applicationId not found`);\r\n\r\n        if(config.auth === 'object-based' && !config.apiKey) throw new Error('Object-based auth selected but did not find an API key');\r\n\r\n        try {\r\n            if(config.auth === 'object-based' && Knack) {\r\n                console.log(`\r\n                    Warning! Object-based auth selected but it looks like you are running code in the Knack Javascript area. \r\n                    We strongly recommend you use view-based auth instead;\r\n                `)\r\n            }\r\n        } catch(err) {\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = KnackAPI;", "// function to prepare API Payload post many\r\n\r\n// Put\r\nfunction createApiPayloadPutSingle(sceneKey, viewKey, record_id, recordData) {\r\n    const payload = {\r\n        scene: sceneKey,\r\n        view: viewKey,\r\n        recordId: record_id,\r\n        body: recordData,\r\n    }\r\n    return payload\r\n}\r\nfunction createApiPayloadPutMany(sceneKey, viewKey, records, progress) {\r\n\r\n    // scene_1709/views/view_4124\r\n\r\n    const payload = {\r\n        scene: sceneKey,\r\n        view: viewKey,\r\n        records: records,\r\n    }\r\n    // if (progress) { payload.progressCbs: progress[0].map(callback => (progress, len, fetchResult) => callback(progress, len, fetchResult, progress[1])) }\r\n    return payload\r\n\r\n}\r\n\r\n\r\n// Post\r\nfunction createApiPayloadPostSingle(sceneKey, viewKey, record) {\r\n\r\n    const payload = {\r\n        scene: sceneKey,\r\n        view: viewKey,\r\n        body: record,\r\n    }\r\n    return payload\r\n\r\n}\r\nfunction createApiPayloadPostMany(sceneKey, viewKey, records) {\r\n\r\n    // scene_1704/views/view_4122\r\n\r\n    const payload = {\r\n        scene: sceneKey,\r\n        view: viewKey,\r\n        records: records\r\n    }\r\n    return payload\r\n\r\n}\r\n//get\r\nfunction createApiPayloadGetSingle(sceneKey, viewKey, record_id) {\r\n\r\n    const payload = {\r\n        scene: sceneKey,\r\n        view: viewKey,\r\n        recordId: record_id,\r\n    }\r\n    return payload\r\n\r\n}\r\nfunction createApiPayloadGetMany(sceneKey, viewKey, filters, parentRecord, format) {\r\n\r\n    if (parentRecord) {\r\n        var url = `https://api.knack.com/v1/pages/${sceneKey}/views/${viewKey}/records?${parentRecord.name}_id=${parentRecord.id}`\r\n        if (filters) { // Check if filters is not empty\r\n            url += '&filters=' + encodeURIComponent(JSON.stringify(filters)); // Use & instead of ?\r\n        }\r\n        // console.log('params', sceneKey, viewKey, filters , parentRecord , format)\r\n        // console.log('payload', url)\r\n        return url\r\n\r\n    } else {\r\n\r\n        if (!format) { format = 'both' }\r\n        const payload = {\r\n            scene: sceneKey,\r\n            view: viewKey,\r\n            format: format,\r\n        }\r\n        if (filters) { payload.filters = filters }\r\n        // console.log('params', sceneKey, viewKey, filters , parentRecord , format)\r\n        // console.log('payload', payload)\r\n        return payload\r\n    }\r\n}\r\n//delete\r\nfunction createApiPayloadDeleteSingle(sceneKey, viewKey, record) {\r\n    const payload = {\r\n        recordId: record.id,\r\n        scene: sceneKey,\r\n        view: viewKey,//view_21 is a view with a delete link like a grid or details view\r\n    }\r\n    return payload\r\n}\r\n\r\n//report\r\nfunction createApiPayloadGetFromReport(sceneKey, viewKey, filters = {}) {\r\n\r\n    if (filters) {\r\n\r\n        const baseUrl = `https://api.knack.com/v1/scenes/${sceneKey}/views/${viewKey}/report/0`\r\n        const apiUrl = baseUrl + '?filters=' + encodeURIComponent(JSON.stringify(filters));\r\n        return { url: apiUrl, filters: true }\r\n\r\n    } else {\r\n\r\n        const payload = {\r\n            scene: sceneKey,\r\n            view: viewKey,\r\n        }\r\n        return payload\r\n\r\n    }\r\n}\r\n\r\nexport const payloads = {\r\n    // get\r\n    getSingle: (sceneKey, viewKey, record_id) => createApiPayloadGetSingle(sceneKey, viewKey, record_id),\r\n    getMany: (sceneKey, viewKey, filters, parentRecord, format) => createApiPayloadGetMany(sceneKey, viewKey, filters, parentRecord, format),\r\n    // post\r\n    postSingle: (sceneKey, viewKey, record) => createApiPayloadPostSingle(sceneKey, viewKey, record),\r\n    postMany: (sceneKey, viewKey, records) => createApiPayloadPostMany(sceneKey, viewKey, records),\r\n    // delete\r\n    deleteSingle: (sceneKey, viewKey, record) => createApiPayloadDeleteSingle(sceneKey, viewKey, record),\r\n    // put\r\n    putSingle: (sceneKey, viewKey, record_id, recordData) => createApiPayloadPutSingle(sceneKey, viewKey, record_id, recordData),\r\n    putMany: (sceneKey, viewKey, records, progress) => createApiPayloadPutMany(sceneKey, viewKey, records, progress)\r\n};", "\r\nfunction createFilters(condition) {\r\n    return {\r\n        \"match\": condition,\r\n        \"rules\": []\r\n    }\r\n}\r\n\r\nfunction Commonfilters(field_key) {\r\n\r\n    return {\r\n        isDuringTheCurrentMonth: {\r\n            field: field_key,\r\n            operator: \"is during the current\",\r\n            type: \"month\",\r\n        },\r\n        isDuringThePreviousMonth: {\r\n            field: field_key,\r\n            operator: \"is during the previous\",\r\n            range: \"1\",\r\n            type: \"months\",\r\n        },\r\n        isDuringTheNextMonth: {\r\n            field: field_key,\r\n            operator: \"is during the next\",\r\n            range: \"1\",\r\n            type: \"months\",\r\n        },\r\n        isBeforeThePreviousMonth: {\r\n            field: field_key,\r\n            operator: \"is before the previous\",\r\n            range: \"1\",\r\n            type: \"months\",\r\n        },\r\n    }\r\n\r\n}\r\n\r\nexport const filters = {\r\n    create: (condition) => createFilters(condition),\r\n    common: (field_key) => Commonfilters(field_key)\r\n}", "import KnackAPI from 'knack-api-helper';\r\nimport { knackApiInit } from './knack-api-init.js'\r\nimport { knackApi } from '../index.js';\r\n\r\n// get\r\nasync function knackApiViewGetSingle(payload) {\r\n    const knackAPI = await knackApiInit()\r\n    console.log(\"api call started\")\r\n    try {\r\n        const response = await knackAPI.get(payload)\r\n        console.log(\"api call completed\")\r\n        const responseJson = response.json\r\n        return responseJson\r\n    } catch (err) {\r\n        console.log(\"api call failed\", err)\r\n        return null;\r\n    }\r\n}\r\n\r\nasync function knackApiViewGetMany(payload) {\r\n    const knackAPI = await knackApiInit()\r\n    console.log(\"api call started\")\r\n    try {\r\n        const resRecords = await knackAPI.getMany(payload);\r\n        console.log(\"api call completed\")\r\n        return resRecords.records\r\n    } catch (err) {\r\n        console.log(\"api call failed\", err)\r\n        return null;\r\n    }\r\n}\r\n\r\nasync function knackApiViewGetManyParentRecord(payload) {\r\n\r\n    const basePayload = payload\r\n    var iteration = 1\r\n    var iterationUrl = `&page=${iteration}&rows_per_page=1000`\r\n    var currentPayload = basePayload + iterationUrl\r\n    var headers = {\r\n        'Authorization': Knack.getUserToken(),\r\n        'X-Knack-REST-API-Key': 'knack',\r\n        'X-Knack-Application-Id': Knack.application_id,\r\n        'Content-Type': 'application/json'\r\n    };\r\n    var response = {}\r\n\r\n    var responseJson = await fetchAPIcall(currentPayload, headers)\r\n    response = { ...responseJson }\r\n\r\n    if (responseJson.total_records > 1000) {\r\n        const numIteration = responseJson.total_pages\r\n        for (var i = 2; i <= numIteration; i++) {\r\n            var iteration = i\r\n            var iterationUrl = `&page=${iteration}&rows_per_page=1000`\r\n            var currentPayload = basePayload + iterationUrl\r\n            responseJson = await fetchAPIcall(currentPayload, headers)\r\n            response.records = [...response.records, ...responseJson.records];\r\n        }\r\n    }\r\n\r\n    return response\r\n\r\n}\r\n\r\n// post\r\nasync function knackApiViewPostMany(payload) {\r\n    const knackAPI = await knackApiInit()\r\n    console.log(\"api call started\")\r\n    try {\r\n        const responses = await knackAPI.postMany(payload);\r\n        if (responses.summary.rejected > 0) {\r\n            responses.summary.errors.forEach(err => {\r\n                console.log(JSON.stringify(err.reason));\r\n            })\r\n        }\r\n        console.log(\"api call completed\")\r\n        return responses\r\n    } catch (err) {\r\n        console.log(\"api call failed\", err)\r\n        return null;\r\n    }\r\n}\r\n\r\nasync function knackApiViewPostSingle(payload) {\r\n    const knackAPI = await knackApiInit()\r\n    console.log(\"api call started\")\r\n    try {\r\n        const response = await knackAPI.post(payload);\r\n        const recordCreated = response.json;\r\n        console.log(\"api call completed\")\r\n        return recordCreated\r\n    } catch (err) {\r\n        console.log(\"api call failed\", err)\r\n        return null;\r\n    }\r\n}\r\n\r\n// put\r\nasync function knackApiViewPutSingle(payload) {\r\n    const knackAPI = await knackApiInit()\r\n    console.log(\"api call started\")\r\n    try {\r\n        const response = await knackAPI.put(payload);\r\n        const responseJson = await response.json\r\n        console.log(\"api call completed\")\r\n        return responseJson\r\n    } catch (err) {\r\n        console.log(\"api call failed\", err)\r\n        return null;\r\n    }\r\n}\r\n\r\nasync function knackApiViewPutMany(payload) {\r\n\r\n\r\n    console.log(\"api call started\")\r\n\r\n    const records = payload.records\r\n    const numRecords = records.length\r\n    const recPerBatch = 100\r\n    const numBatches = Math.ceil(numRecords / recPerBatch)\r\n    const batches = []\r\n\r\n    for (var i = 0; i < numBatches; i++) {\r\n\r\n        const batch = records.slice(i * recPerBatch, (i + 1) * recPerBatch)\r\n        batches.push(batch)\r\n    }\r\n\r\n    const resArray = []\r\n    let curBatch = 0\r\n\r\n    for (var batch of batches) {\r\n\r\n        curBatch += 1\r\n        console.log(`processing batch ${curBatch} of ${numBatches}`)\r\n\r\n        const knackAPI = await knackApiInit()\r\n        const batchPayload = knackApi.payloads.putMany(payload.scene, payload.view, batch)\r\n        try {\r\n            const responses = await knackAPI.putMany(batchPayload);\r\n            if (responses.summary.rejected > 0) {\r\n                responses.summary.errors.forEach(err => {\r\n                    console.log(JSON.stringify(err.reason));\r\n                })\r\n            }\r\n\r\n            resArray.push(responses)\r\n            // return responses\r\n        } catch (err) {\r\n            console.log(\"api call failed\", err)\r\n            return null;\r\n        }\r\n    }\r\n\r\n    console.log(\"api call completed\")\r\n\r\n    const result = combineResponses(resArray)\r\n    return result\r\n\r\n}\r\n\r\n// delete\r\nasync function knackApiViewDeleteSingle(payload) {\r\n    const knackAPI = await knackApiInit()\r\n    console.log(\"api call started\")\r\n    try {\r\n        const response = await knackAPI.delete(payload)\r\n        console.log(\"api call completed\")\r\n        return response\r\n    } catch (err) {\r\n        console.log(\"api call failed\", err)\r\n        return null;\r\n    }\r\n}\r\n\r\n// report\r\nasync function knackApiViewGetFromReport(payload) {\r\n\r\n    if (payload.filters) {\r\n\r\n        console.log(\"api call made from url\")\r\n\r\n        var headers = {\r\n            'Authorization': Knack.getUserToken(),\r\n            'X-Knack-REST-API-Key': 'knack',\r\n            'X-Knack-Application-Id': Knack.application_id,\r\n            'Content-Type': 'application/json'\r\n        };\r\n\r\n        var responseJson = await fetchAPIcall(payload.url, headers)\r\n        var records = responseJson.report.records\r\n        return records\r\n\r\n    } else {\r\n\r\n        const knackAPI = new KnackAPI({\r\n            auth: 'view-based',\r\n            applicationId: Knack.application_id,\r\n            userToken: Knack.getUserToken()\r\n        });\r\n\r\n        console.log(\"api call started\")\r\n\r\n        try {\r\n\r\n            const reportDataResponse = await knackAPI.getFromReportView(payload)\r\n            console.log(\"api call completed\")\r\n            const response = reportDataResponse.json.reports[0].records\r\n            return response\r\n\r\n        } catch (err) {\r\n            console.log(\"api call failed\", err)\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n// uplaod file/image asset\r\nasync function knackUploadAsset(file) {\r\n\r\n    var url = `https://api.knack.com/v1/applications/${Knack.application_id}/assets/file/upload`\r\n\r\n\r\n\r\n    const formData = new FormData();\r\n    formData.append('files', file)\r\n\r\n    var options = {\r\n        'method': 'POST',\r\n        'headers': {\r\n            'X-Knack-REST-API-Key': 'knack',\r\n            'X-Knack-Application-Id': Knack.application_id,\r\n        },\r\n        'body': formData\r\n    };\r\n\r\n    var response = await fetch(url, options);\r\n    console.log(response)\r\n    var result = await response.json()\r\n    console.log(result)\r\n    return { id: result.id, url: result.public_url }\r\n\r\n}\r\n\r\nasync function fetchAPIcall(payload, headers) {\r\n    console.log(\"api call started\")\r\n    try {\r\n        const response = await fetch(payload, {\r\n            method: 'GET',\r\n            headers,\r\n        });\r\n        const responseJson = await response.json();\r\n        console.log(\"api call completed\")\r\n        return responseJson\r\n    } catch (err) {\r\n        console.log(\"api call failed\")\r\n        console.log(\"err\", err)\r\n        return err\r\n    }\r\n}\r\n\r\nfunction combineResponses(resArray) {\r\n\r\n    let combinedObjects = [];\r\n    let mergedSettings = { records: [], scene: '', view: '' };\r\n    let mergedSummary = { errors: [], fulfilled: 0, rejected: 0 };\r\n\r\n    // Assuming the first array has the correct scene and view (as they are the same)    \r\n    mergedSettings.scene = resArray[0].settings.scene;\r\n    mergedSettings.view = resArray[0].settings.view;\r\n\r\n    // Loop through each array in arrayOfArrays\r\n    for (let arr of resArray) {\r\n        // Merge objects (excluding the last element which is settings and summary)\r\n        combinedObjects = [...combinedObjects, ...arr];\r\n\r\n        // Merge settings - concatenate the record arrays\r\n        mergedSettings.record = [...mergedSettings.records, ...arr.settings.records];\r\n\r\n        // Merge summary\r\n        mergedSummary.errors = [...mergedSummary.errors, ...arr.summary.errors];\r\n        mergedSummary.fulfilled += arr.summary.fulfilled;\r\n        mergedSummary.rejected += arr.summary.rejected;\r\n    }\r\n\r\n    // Add the merged settings and summary to the combined array\r\n    combinedObjects.settings = mergedSettings\r\n    combinedObjects.summary = mergedSummary\r\n\r\n    return combinedObjects;\r\n\r\n}\r\n\r\nexport const calls = {\r\n    // get\r\n    getSingle: (payload) => knackApiViewGetSingle(payload),\r\n    getMany: (payload) => knackApiViewGetMany(payload),\r\n    getManyParentRecord: (payload) => knackApiViewGetManyParentRecord(payload),\r\n    // post\r\n    postSingle: (payload) => knackApiViewPostSingle(payload),\r\n    postMany: (payload) => knackApiViewPostMany(payload),\r\n    //put\r\n    putMany: (payload) => knackApiViewPutMany(payload),\r\n    putSingle: (payload) => knackApiViewPutSingle(payload),\r\n    // delete\r\n    deleteSingle: (payload) => knackApiViewDeleteSingle(payload),\r\n\r\n}\r\n\r\n\r\n\r\nasync function knackApiViewPutManyArchived(payload) {\r\n    const knackAPI = await knackApiInit()\r\n    console.log(\"api call started\")\r\n    try {\r\n        const responses = await knackAPI.putMany(payload);\r\n        if (responses.summary.rejected > 0) {\r\n            res.summary.errors.forEach(err => {\r\n                errorHandler(err.reason);\r\n            })\r\n        }\r\n        console.log(\"api call completed\")\r\n        return responses\r\n    } catch (err) {\r\n        console.log(\"api call failed\", err)\r\n        return null;\r\n    }\r\n}", "import KnackAPI from 'knack-api-helper';\r\n\r\nexport async function knackApiInit() {\r\n\r\n    const runEnv = process.env.KNACK_API_RUNENV\r\n\r\n    if (runEnv === 'browser') {\r\n        return new KnackAPI({\r\n            auth: 'view-based',\r\n            applicationId: Knack.application_id,\r\n            userToken: Knack.getUserToken()\r\n        });\r\n    }\r\n\r\n    if (runEnv === 'server') {\r\n        const userToken = await knackLogin()\r\n        return new KnackAPI({\r\n            auth: 'view-based',\r\n            applicationId: process.env.KNACK_APP_ID,\r\n            userToken: userToken\r\n        });\r\n    }\r\n}\r\n\r\n// login\r\n\r\nasync function knackLogin() {\r\n\r\n    //Initialize without a user token\r\n    const knackAPI = new KnackAPI({\r\n        auth: 'view-based',\r\n        applicationId: process.env.KNACK_APP_ID,\r\n    });\r\n\r\n    //Now we remotely login to Knack to obtain a user token & append it to knackAPI\r\n    try {\r\n        return await knackAPI.login({\r\n            email: process.env.KNACK_API_LOGIN,\r\n            password: process.env.KNACK_API_PASSWORD\r\n        });\r\n\r\n        //Now you can run knackAPI methods authenticated as the user you logged in as!\r\n\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}", "export const utils = {\r\n    isoTo_MMDDYYYY: (isoDate) => isoDatestoKnackDatesMMDDYYYY (isoDate),\r\n    isoTo_DDMMYYYY : (isoDate) => isoDatestoKnackDatesDDMMYYYY (isoDate)\r\n}\r\n\r\nfunction isoDatestoKnackDatesMMDDYYYY (isoDate) {\r\n    isoDate = new Date(isoDate)\r\n    return  {\r\n        date: isoDate.toLocaleDateString('en-US'), // Convert to \"MM/DD/YYYY\" format\r\n        // iso_timestamp: item.creationTime,\r\n        hours: ((isoDate.getUTCHours() % 12) || 12).toString().padStart(2, '0'),\r\n        minutes: isoDate.getUTCMinutes().toString().padStart(2, '0'),\r\n        am_pm: isoDate.getUTCHours() >= 12 ? 'PM' : 'AM',\r\n        // unix_timestamp: isoDate.getTime(),\r\n        // timestamp: isoDate.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })\r\n      }\r\n\r\n}\r\n\r\nfunction isoDatestoKnackDatesDDMMYYYY (isoDate) {\r\n    isoDate = new Date(isoDate)\r\n    return  {\r\n        date: isoDate.toLocaleDateString('en-GB'), // Convert to \"MM/DD/YYYY\" format\r\n        // iso_timestamp: item.creationTime,\r\n        hours: ((isoDate.getUTCHours() % 12) || 12).toString().padStart(2, '0'),\r\n        minutes: isoDate.getUTCMinutes().toString().padStart(2, '0'),\r\n        am_pm: isoDate.getUTCHours() >= 12 ? 'PM' : 'AM',\r\n        // unix_timestamp: isoDate.getTime(),\r\n        // timestamp: isoDate.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })\r\n      }\r\n\r\n}", "export const timeout = {\r\n    set: (duration = 5 * 60 * 1000) => setApiCallTImeLimit(duration)\r\n};\r\n\r\nfunction setApiCallTImeLimit(duration) {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve(\"Update process timed out after \" + (duration / (1000*60)) + \" minutes\");  // Resolve with a message\r\n        }, duration);\r\n    });\r\n}\r\n", "import { payloads } from \"./knack-api/knack-api-payloads.js\";\r\nimport { filters } from \"./knack-api/knack-api-filters.js\";\r\nimport { calls } from \"./knack-api/knack-api-calls.js\";\r\nimport { utils } from \"./knack-api/knack-api-utils.js\";\r\nimport { timeout } from \"./knack-api/knack-api-timeout.js\";\r\n\r\nexport const knackApi = {\r\n    filters: filters,\r\n    payloads: payloads,\r\n    calls: calls,\r\n    utils: utils,\r\n    timeout: timeout\r\n}"],
  "mappings": "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",
  "names": ["fetch", "url", "options", "helperData", "retryDelay", "KnackAPI", "res", "url", "retries", "options", "requests", "progressCbs", "maxRecordsToGet", "progressBar", "resultsReport", "scene", "records", "filters", "url", "filters", "records", "filters", "import_knack_api_helper", "KnackAPI", "userToken", "records", "batch", "filters"]
}
